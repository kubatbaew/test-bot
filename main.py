import asyncio
import datetime
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties

from keyboards import keyboard
from decouple import config
from logics import get_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    filename="bot.log",  # –õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —Ñ–∞–π–ª
    filemode="a"  # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
)

logger = logging.getLogger(__name__)

BOT_TOKEN = config("BOT_TOKEN")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

class OrderState(StatesGroup):
    order_id = State()

@dp.message(CommandStart())
async def start(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer(
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Global Trade Bot! üëãü§ñ\n–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", 
        reply_markup=keyboard
    )

@dp.callback_query()
async def handle_callback(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    if callback_query.data == "get_info":
        try:
            with open("desc.html", "r", encoding="utf-8") as file:
                content = file.read()
            await callback_query.message.answer(content)
            await callback_query.message.answer_video("BAACAgIAAxkBAAIBNmd5WL-Z0oCf9dyQXDIaRdAUeRmlAALNWwACEGzRS_p3atO1dX3KNgQ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ 'get_info': {e}", exc_info=True)
    elif callback_query.data == "get_data":
        await callback_query.message.answer(
            "–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ —è –ø–æ—Å–º–æ—Ç—Ä—é –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–∞ –ø–æ—Å—ã–ª–∫–∞ üéâ\n"
            "–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ –∫–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –ø–æ—Å—ã–ª–∫–∏. ‚¨áÔ∏è: "
        )
        await state.set_state(OrderState.order_id)

@dp.message(OrderState.order_id)
async def handle_order_id(message: types.Message, state: FSMContext):
    order_id = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫-–∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {order_id}")
    await state.clear()
    if order_id:
        loading_message = await message.answer(text="–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç‚è≥")
        try:
            data = get_data(order_id)
            await loading_message.delete()

            if data["data"]["data"]["wlOrder"] is None:
                await message.answer(
                    "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—Ä–µ–∫ –∫–æ–¥, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ: \n"
                    "1 - –í–∞—à–∞ –ø–æ—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–∞ –∫ –Ω–∞–º –Ω–∞ —Å–∫–ª–∞–¥ \n"
                    "2 - –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫ –∫–æ–¥ ¬´–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–∫ –∫–æ–¥ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞? "
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏–¥–µ–æ—É—Ä–æ–∫‚¨áÔ∏è¬ª"
                )
                await message.answer_video("BAACAgIAAxkBAAIBNmd5WL-Z0oCf9dyQXDIaRdAUeRmlAALNWwACEGzRS_p3atO1dX3KNgQ")
                return

            with open('send_data.html', "r", encoding="utf-8") as file:
                content = file.read().format(
                    data["data"]["data"]["wlOrder"]["waybillNumber"],
                    data["data"]["data"]["wlOrder"]["quantity"],
                )
                for dt in data["data"]["data"]["wlMessageList"][::-1]:
                    mess = dt["elsAddress"]
                    date = dt["dateTime"]
                    content += f"\n<b>–í—Ä–µ–º—è: {date}</b>\n<b>–°—Ç–∞—Ç—É—Å:</b> <i>{mess}</i>\n"
            
            await message.answer(text=content)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫-–∫–æ–¥–∞: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer(
            "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—Ä–µ–∫ –∫–æ–¥, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ: \n"
            "1 - –í–∞—à–∞ –ø–æ—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–∞ –∫ –Ω–∞–º –Ω–∞ —Å–∫–ª–∞–¥ \n"
            "2 - –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫ –∫–æ–¥ ¬´–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–∫ –∫–æ–¥ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞? "
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏–¥–µ–æ—É—Ä–æ–∫‚¨áÔ∏è¬ª"
        )
        await message.answer_video("BAACAgIAAxkBAAIBNmd5WL-Z0oCf9dyQXDIaRdAUeRmlAALNWwACEGzRS_p3atO1dX3KNgQ")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
